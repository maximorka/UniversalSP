package comUniversal.lowLevel.Demodulator;

import comUniversal.util.MyComplex;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.transform.DftNormalization;
import org.apache.commons.math3.transform.FastFourierTransformer;
import org.apache.commons.math3.transform.TransformType;

import java.util.ArrayList;
import java.util.List;

public class OptimalNonCoherent {

    private float[] bpfClocker = { 91.72711898286996760E-6f,
            -282.2538869673860520E-6f,
            -644.5668236355722910E-6f,
            -979.3699095747678030E-6f,
            -0.001271995231373002f,
            -0.001509591514943497f,
            -0.001681688643636367f,
            -0.001780659120048888f,
            -0.001802056129611509f,
            -0.001744813222077390f,
            -0.001611296649235086f,
            -0.001407207821349939f,
            -0.001141339890849859f,
            -825.1988536328917690E-6f,
            -472.5054968100238850E-6f,
            -98.59975634914654560E-6f,
            280.2266510648561280E-6f,
            647.4402801678083960E-6f,
            986.9877381406781750E-6f,
            0.001283997675958474f,
            0.001525432284771955f,
            0.001700659748717588f,
            0.001801922513558589f,
            0.001824680742930248f,
            0.001767815755213920f,
            0.001633684328664892f,
            0.001428021265017635f,
            0.001159694228777560f,
            840.3213412829159100E-6f,
            483.7680226458132890E-6f,
            105.5448772597312510E-6f,
            -277.8672232153347750E-6f,
            -649.7354835891671880E-6f,
            -993.8056368395081110E-6f,
            -0.001295012607883900f,
            -0.001540140309559524f,
            -0.001718401666569272f,
            -0.001821913405338706f,
            -0.001846044707923149f,
            -0.001789624308649024f,
            -0.001654996774882058f,
            -0.001447925289816817f,
            -0.001177344958623637f,
            -854.9771968407050050E-6f,
            -494.8218455547363420E-6f,
            -112.5490250056638790E-6f,
            275.1828488623626750E-6f,
            651.4531959672796120E-6f,
            999.8178912327489340E-6f,
            0.001305028120003554f,
            0.001553698036286125f,
            0.001734891983097514f,
            0.001840605507899109f,
            0.001866119010712804f,
            0.001810208398378572f,
            0.001675203344841692f,
            0.001466890403160283f,
            0.001194264990197948f,
            869.1428737563774120E-6f,
            505.6479451263871850E-6f,
            119.5984881345916050E-6f,
            -272.1813794852189400E-6f,
            -652.5951115920241820E-6f,
            -0.001005020005999939f,
            -0.001314033759364851f,
            -0.001566089539052041f,
            -0.001750110014437395f,
            -0.001857974292594949f,
            -0.001884876348926157f,
            -0.001829539130421513f,
            -0.001694274794930962f,
            -0.001484888260228276f,
            -0.001210428079042772f,
            -882.7953317220383270E-6f,
            -516.2274448210978330E-6f,
            -126.6793294207424200E-6f,
            268.8712532847538340E-6f,
            653.1638480875160440E-6f,
            0.001009408706799751f,
            0.001322020539683139f,
            0.001577300541580670f,
            0.001764036838475209f,
            0.001873997028782372f,
            0.001902291176780811f,
            0.001847589249891471f,
            0.001712183331922036f,
            0.001501891714630542f,
            0.001225808874656190f,
            895.9120804240458260E-6f,
            526.5416494194478220E-6f,
            133.7774154576368060E-6f,
            -265.2614746596338480E-6f,
            -653.1629357779268050E-6f,
            -0.001012981939922118f,
            -0.001328980951238448f,
            -0.001587318436884233f,
            -0.001776655323396133f,
            -0.001888652819989579f,
            -0.001918339747305171f,
            -0.001864333187444413f,
            -0.001728902661657062f,
            -0.001517874867255118f,
            -0.001240382967435907f,
            -908.4712226057667980E-6f,
            -536.5720824035502120E-6f,
            -140.8784468085007970E-6f,
            261.3615925212284880E-6f,
            652.5968053368417260E-6f,
            0.001015738869741345f,
            0.001334908968184213f,
            0.001596132304062897f,
            0.001787950153209351f,
            0.001901922637039385f,
            0.001933000151615455f,
            0.001879747103015518f,
            0.001744408035371884f,
            0.001532813113207687f,
            0.001254126934249149f,
            920.4514963524129600E-6f,
            546.3005231914794420E-6f,
            147.9679886485539270E-6f,
            -257.1816774976766740E-6f,
            -651.4707737532862670E-6f,
            -0.001017679873984440f,
            -0.001339800053262774f,
            -0.001603732922213013f,
            -0.001797907850208644f,
            -0.001913789348065163f,
            -0.001946252355177608f,
            -0.001893808926762536f,
            -0.001758676293568881f,
            -0.001546683186749386f,
            -0.001267018382537181f,
            -931.8323165110160740E-6f,
            -555.7090441458182110E-6f,
            -155.0315018315996270E-6f,
            252.7322980803534160E-6f,
            649.7910286509755910E-6f,
            0.001018806536833364f,
            0.001343651159927615f,
            0.001610112781425858f,
            0.001806516794331963f,
            0.001924237745367441f,
            0.001958078230987735f,
            0.001906498397138603f,
            0.001771685907354218f,
            0.001559463204143645f,
            0.001279035992864815f,
            942.5938151594067450E-6f,
            564.7800472774165430E-6f,
            162.0543743124388240E-6f,
            -248.0244957679044830E-6f,
            -647.5646110006222220E-6f,
            -0.001019121639883841f,
            -0.001346460731877209f,
            -0.001615266090863638f,
            -0.001813767239389288f,
            -0.001933254569064556f,
            -0.001968461589610250f,
            -0.001917797096022148f,
            -0.001783417017158729f,
            -0.001571132704326754f,
            -0.001290159559828264f,
            -952.7168810398633240E-6f,
            -573.4963005658726160E-6f,
            -169.0219528557300920E-6f,
            243.0697592653683050E-6f,
            644.7993962683967770E-6f,
            0.001018629150987753f,
            0.001348228700010168f,
            0.001619188783905011f,
            0.001819651326134019f,
            0.001940828527496440f,
            0.001977388206018947f,
            0.001927688480837027f,
            0.001793851468766684f,
            0.001581672687320577f,
            0.001300370031237303f,
            962.1831978746231470E-6f,
            581.8409738186023790E-6f,
            175.9195749609955330E-6f,
            -237.8799977977938340E-6f,
            -641.5040740466808980E-6f,
            -0.001017334211010272f,
            -0.001348956476816498f,
            -0.001621878520358016f,
            -0.001824163092158869f,
            -0.001946950314346886f,
            -0.001984845843191464f,
            -0.001936157913601534f,
            -0.001802972846581378f,
            -0.001591065650309518f,
            -0.001309649545490781f,
            -970.9752814822672920E-6f,
            -589.7976739908602890E-6f,
            -182.7326009329198090E-6f,
            232.4675135996447470E-6f,
            637.6881262164100690E-6f,
            0.001015243118536640f,
            0.001348646948224452f,
            0.001623334685743540f,
            0.001827298478603385f,
            0.001951612622455304f,
            0.001990824272414145f,
            0.001943192686850285f,
            0.001810766504061340f,
            0.001599295621308464f,
            0.001317981467067482f,
            979.0765156160032350E-6f,
            597.3504798900401060E-6f,
            189.4464460255476870E-6f,
            -226.8449736430243320E-6f,
            -633.3618036929412940E-6f,
            -0.001012363312567723f,
            -0.001347304462927419f,
            -0.001623558387658312f,
            -0.001829055333665695f,
            -0.001954810154295399f,
            -0.001995315290259936f,
            -0.001948782046379054f,
            -0.001817219591266407f,
            -0.001606348190352269f,
            -0.001325350420057935f,
            -986.4711864471104260E-6f,
            -604.4839761884276190E-6f,
            -196.0466125887485590E-6f,
            221.0253806692971350E-6f,
            628.5361018103988040E-6f,
            0.001008703353247193f,
            0.001344934819219927f,
            0.001622552449231402f,
            0.001829433412917529f,
            0.001956539629104265f,
            0.001998312732208278f,
            0.001952917210767802f,
            0.001822321079457566f,
            0.001612210538142032f,
            0.001331742319665875f,
            993.1445156190588930E-6f,
            611.1832866696839800E-6f,
            202.5187221450723030E-6f,
            -215.0220435901142080E-6f,
            -623.2227344018931490E-6f,
            -0.001004272900666843f,
            -0.001341545249376538f,
            -0.001620321399694129f,
            -0.001828434376427097f,
            -0.001956799786651432f,
            -0.001999812482881921f,
            -0.001955591387643698f,
            -0.001826061782700391f,
            -0.001616871462088130f,
            -0.001337144401612042f,
            -999.0826918003465380E-6f,
            -617.4341066357113730E-6f,
            -208.8485473251702160E-6f,
            208.8485473251702160E-6f,
            617.4341066357113730E-6f,
            999.0826918003465380E-6f,
            0.001337144401612042f,
            0.001616871462088130f,
            0.001826061782700391f,
            0.001955591387643698f,
            0.001999812482881921f,
            0.001956799786651432f,
            0.001828434376427097f,
            0.001620321399694129f,
            0.001341545249376538f,
            0.001004272900666843f,
            623.2227344018931490E-6f,
            215.0220435901142080E-6f,
            -202.5187221450723030E-6f,
            -611.1832866696839800E-6f,
            -993.1445156190588930E-6f,
            -0.001331742319665875f,
            -0.001612210538142032f,
            -0.001822321079457566f,
            -0.001952917210767802f,
            -0.001998312732208278f,
            -0.001956539629104265f,
            -0.001829433412917529f,
            -0.001622552449231402f,
            -0.001344934819219927f,
            -0.001008703353247193f,
            -628.5361018103988040E-6f,
            -221.0253806692971350E-6f,
            196.0466125887485590E-6f,
            604.4839761884276190E-6f,
            986.4711864471104260E-6f,
            0.001325350420057935f,
            0.001606348190352269f,
            0.001817219591266407f,
            0.001948782046379054f,
            0.001995315290259936f,
            0.001954810154295399f,
            0.001829055333665695f,
            0.001623558387658312f,
            0.001347304462927419f,
            0.001012363312567723f,
            633.3618036929412940E-6f,
            226.8449736430243320E-6f,
            -189.4464460255476870E-6f,
            -597.3504798900401060E-6f,
            -979.0765156160032350E-6f,
            -0.001317981467067482f,
            -0.001599295621308464f,
            -0.001810766504061340f,
            -0.001943192686850285f,
            -0.001990824272414145f,
            -0.001951612622455304f,
            -0.001827298478603385f,
            -0.001623334685743540f,
            -0.001348646948224452f,
            -0.001015243118536640f,
            -637.6881262164100690E-6f,
            -232.4675135996447470E-6f,
            182.7326009329198090E-6f,
            589.7976739908602890E-6f,
            970.9752814822672920E-6f,
            0.001309649545490781f,
            0.001591065650309518f,
            0.001802972846581378f,
            0.001936157913601534f,
            0.001984845843191464f,
            0.001946950314346886f,
            0.001824163092158869f,
            0.001621878520358016f,
            0.001348956476816498f,
            0.001017334211010272f,
            641.5040740466808980E-6f,
            237.8799977977938340E-6f,
            -175.9195749609955330E-6f,
            -581.8409738186023790E-6f,
            -962.1831978746231470E-6f,
            -0.001300370031237303f,
            -0.001581672687320577f,
            -0.001793851468766684f,
            -0.001927688480837027f,
            -0.001977388206018947f,
            -0.001940828527496440f,
            -0.001819651326134019f,
            -0.001619188783905011f,
            -0.001348228700010168f,
            -0.001018629150987753f,
            -644.7993962683967770E-6f,
            -243.0697592653683050E-6f,
            169.0219528557300920E-6f,
            573.4963005658726160E-6f,
            952.7168810398633240E-6f,
            0.001290159559828264f,
            0.001571132704326754f,
            0.001783417017158729f,
            0.001917797096022148f,
            0.001968461589610250f,
            0.001933254569064556f,
            0.001813767239389288f,
            0.001615266090863638f,
            0.001346460731877209f,
            0.001019121639883841f,
            647.5646110006222220E-6f,
            248.0244957679044830E-6f,
            -162.0543743124388240E-6f,
            -564.7800472774165430E-6f,
            -942.5938151594067450E-6f,
            -0.001279035992864815f,
            -0.001559463204143645f,
            -0.001771685907354218f,
            -0.001906498397138603f,
            -0.001958078230987735f,
            -0.001924237745367441f,
            -0.001806516794331963f,
            -0.001610112781425858f,
            -0.001343651159927615f,
            -0.001018806536833364f,
            -649.7910286509755910E-6f,
            -252.7322980803534160E-6f,
            155.0315018315996270E-6f,
            555.7090441458182110E-6f,
            931.8323165110160740E-6f,
            0.001267018382537181f,
            0.001546683186749386f,
            0.001758676293568881f,
            0.001893808926762536f,
            0.001946252355177608f,
            0.001913789348065163f,
            0.001797907850208644f,
            0.001603732922213013f,
            0.001339800053262774f,
            0.001017679873984440f,
            651.4707737532862670E-6f,
            257.1816774976766740E-6f,
            -147.9679886485539270E-6f,
            -546.3005231914794420E-6f,
            -920.4514963524129600E-6f,
            -0.001254126934249149f,
            -0.001532813113207687f,
            -0.001744408035371884f,
            -0.001879747103015518f,
            -0.001933000151615455f,
            -0.001901922637039385f,
            -0.001787950153209351f,
            -0.001596132304062897f,
            -0.001334908968184213f,
            -0.001015738869741345f,
            -652.5968053368417260E-6f,
            -261.3615925212284880E-6f,
            140.8784468085007970E-6f,
            536.5720824035502120E-6f,
            908.4712226057667980E-6f,
            0.001240382967435907f,
            0.001517874867255118f,
            0.001728902661657062f,
            0.001864333187444413f,
            0.001918339747305171f,
            0.001888652819989579f,
            0.001776655323396133f,
            0.001587318436884233f,
            0.001328980951238448f,
            0.001012981939922118f,
            653.1629357779268050E-6f,
            265.2614746596338480E-6f,
            -133.7774154576368060E-6f,
            -526.5416494194478220E-6f,
            -895.9120804240458260E-6f,
            -0.001225808874656190f,
            -0.001501891714630542f,
            -0.001712183331922036f,
            -0.001847589249891471f,
            -0.001902291176780811f,
            -0.001873997028782372f,
            -0.001764036838475209f,
            -0.001577300541580670f,
            -0.001322020539683139f,
            -0.001009408706799751f,
            -653.1638480875160440E-6f,
            -268.8712532847538340E-6f,
            126.6793294207424200E-6f,
            516.2274448210978330E-6f,
            882.7953317220383270E-6f,
            0.001210428079042772f,
            0.001484888260228276f,
            0.001694274794930962f,
            0.001829539130421513f,
            0.001884876348926157f,
            0.001857974292594949f,
            0.001750110014437395f,
            0.001566089539052041f,
            0.001314033759364851f,
            0.001005020005999939f,
            652.5951115920241820E-6f,
            272.1813794852189400E-6f,
            -119.5984881345916050E-6f,
            -505.6479451263871850E-6f,
            -869.1428737563774120E-6f,
            -0.001194264990197948f,
            -0.001466890403160283f,
            -0.001675203344841692f,
            -0.001810208398378572f,
            -0.001866119010712804f,
            -0.001840605507899109f,
            -0.001734891983097514f,
            -0.001553698036286125f,
            -0.001305028120003554f,
            -999.8178912327489340E-6f,
            -651.4531959672796120E-6f,
            -275.1828488623626750E-6f,
            112.5490250056638790E-6f,
            494.8218455547363420E-6f,
            854.9771968407050050E-6f,
            0.001177344958623637f,
            0.001447925289816817f,
            0.001654996774882058f,
            0.001789624308649024f,
            0.001846044707923149f,
            0.001821913405338706f,
            0.001718401666569272f,
            0.001540140309559524f,
            0.001295012607883900f,
            993.8056368395081110E-6f,
            649.7354835891671880E-6f,
            277.8672232153347750E-6f,
            -105.5448772597312510E-6f,
            -483.7680226458132890E-6f,
            -840.3213412829159100E-6f,
            -0.001159694228777560f,
            -0.001428021265017635f,
            -0.001633684328664892f,
            -0.001767815755213920f,
            -0.001824680742930248f,
            -0.001801922513558589f,
            -0.001700659748717588f,
            -0.001525432284771955f,
            -0.001283997675958474f,
            -986.9877381406781750E-6f,
            -647.4402801678083960E-6f,
            -280.2266510648561280E-6f,
            98.59975634914654560E-6f,
            472.5054968100238850E-6f,
            825.1988536328917690E-6f,
            0.001141339890849859f,
            0.001407207821349939f,
            0.001611296649235086f,
            0.001744813222077390f,
            0.001802056129611509f,
            0.001780659120048888f,
            0.001681688643636367f,
            0.001509591514943497f,
            0.001271995231373002f,
            979.3699095747678030E-6f,
            644.5668236355722910E-6f,
            282.2538869673860520E-6f,
            -91.72711898286996760E-6f
    };

    private AutomaticFrequencyTuning automaticFrequencyTuning;
    private MovingAverage channelFilter;
    private Clocker clocker;
    private Pll pll;
    private FineFrequencyTuning fineFrequencyTuning;
    private Bpf bpfTimer1 = new Bpf(bpfClocker);
    private Bpf bpfTimer2 = new Bpf(bpfClocker);
    private Bpf bpfTimer3 = new Bpf(bpfClocker);
    private Bpf bpfTimer4 = new Bpf(bpfClocker);

    // Listeners DdcFrequency
    private List<FrequencyListener> frequencyListeners= new ArrayList<>();

    public void addFrequencyListener(FrequencyListener listener){frequencyListeners.add(listener);}

    public void clearFrequencyListener(){frequencyListeners.clear();}

    private void toListenersFrequency(float frequency){
        if(!frequencyListeners.isEmpty())
            for(FrequencyListener listener: frequencyListeners)
                listener.frequency(frequency);
    }


    public OptimalNonCoherent(float relativeBaudRate){
        automaticFrequencyTuning = new AutomaticFrequencyTuning();
        channelFilter = new MovingAverage((int) (1.f / relativeBaudRate));
        clocker = new Clocker(relativeBaudRate);
        pll = new Pll();
        fineFrequencyTuning = new FineFrequencyTuning();
        automaticFrequencyTuning.addFrequencyListener(new FrequencyListener() {
            @Override
            public void frequency(float f) {
                toListenersFrequency(f);
            }
        });
    }


    public void setRelativeBaudRate(float relativeBaudRate) {
        channelFilter = new MovingAverage((int) (1.f / relativeBaudRate));
        clocker.setRelativeBaudRate(relativeBaudRate);
    }

    private List<Symbol> symbol = new ArrayList<>();

    public void addListenerSymbol(Symbol listener) {
        symbol.add(listener);
    }

    public void clearListenersSymbol() {
        symbol.clear();
    }

    private void toListenersSymbol(int data) {
        if (!symbol.isEmpty())
            for (Symbol listener : symbol)
                listener.symbol(data);
    }

    private List<IqOutDebug> listeners = new ArrayList<>();

    public void addListenerIq(IqOutDebug listener) {
        listeners.add(listener);
    }

    public void clearListenerIq() {
        listeners.clear();
    }

    private void toListenersIq(Complex sempl){
        if(!listeners.isEmpty())
            for(IqOutDebug listener: listeners)
                listener.sempl(sempl);
    }

    private float oldRe = 0.f;
    private float clock = 1.f;

    public void demodulate(MyComplex sempl){

        Complex inSempl = new Complex(sempl.re, sempl.im);
        Complex outAft = automaticFrequencyTuning.tuning(inSempl);

        Complex outFine = fineFrequencyTuning.tuning(outAft);


//        Complex outVco = pll.get();
//        Complex outPll = outFine.multiply(outVco);
        Complex outCf = channelFilter.average(outFine);

//        if(Math.signum(oldRe) != Math.signum(outCf.getReal())) {
//            clock = 1.f;
//        } else {
//            clock = 0.f;
//        }
//        oldRe = (float)outCf.getReal();
//
//
//        Complex outTime1 = bpfTimer1.filter(new Complex(clock, 0.f));
//        Complex outTime2 = bpfTimer2.filter(outTime1);
//        Complex outTime3 = bpfTimer3.filter(outTime2);
//        Complex outTime4 = bpfTimer4.filter(outTime3);
//        clock = 0.f;
        if(clocker.update(outCf)) {
//            clock = 1.f / 512.f;
//            pll.udate(outCf);
            toListenersSymbol(clocker.getBit());
        }

        toListenersIq(inSempl);


    }

    private MyComplex mixer(MyComplex x, MyComplex y) {
        return new MyComplex(x.re * y.re - x.im * y.im, x.im * y.re + x.re * y.im);
    }


}

class Pll {

    private Vco vco = new Vco();
    private LoopFilter loopFilter = new LoopFilter(0.01f, 0.0001f, 2.f*(float)Math.PI*0.5f/3000.f);


    public Complex get(){return vco.get();}

    public void udate(Complex sempl){
        float error = crossProductPhaseDetector(sempl);
        float errorLf = loopFilter.update(error);
        vco.update(-errorLf);
    }

    private float crossProductPhaseDetector(Complex sempl){
        Complex ref = new Complex(Math.signum(sempl.getReal()), 0.f);
        Complex refConj = ref.conjugate();
        Complex difference = sempl.multiply(refConj);
        return (float)Math.atan2(difference.getImaginary(), difference.getReal());
    }


}

class Vco{
    private float accum = 0.f, shift = 0.f;
    public Complex get(){
        accum += shift;

        if(Math.abs(accum) > (float)Math.PI)
            accum -= Math.signum(accum) * 2.f * (float)Math.PI;

        return new Complex(Math.cos(accum), Math.sin(accum));
    }
    public void update(float shift){this.shift = shift;}
}

class Bpf {

    private float[] coefficients;
    private Complex[] lineDelay;

    public Bpf(float[] coefficients) {
        this.coefficients = coefficients;
        lineDelay = new Complex[coefficients.length];
        for (int i = 0; i < lineDelay.length; i++)
            lineDelay[i] = new Complex(0.f, 0.f);
    }

    public Complex filter(Complex sempl) {
        System.arraycopy(lineDelay, 1, lineDelay, 0, lineDelay.length - 1);
        lineDelay[lineDelay.length - 1] = sempl;
        float re = 0.f, im = 0.f;
        for (int i = 0; i < lineDelay.length; i++) {
            re += lineDelay[i].getReal() * coefficients[i];
            im += lineDelay[i].getImaginary() * coefficients[i];
        }
        return new Complex(re, im);
    }

}

class AutomaticFrequencyTuning {

    private float frequency = 0.f;
    private Bpf bpf;
    private FastFourierTransformer fft;
    private LineDelay delayForFft, delayForBpf;
    private float accumVco, phaseVco;
    private int timeTuning, semplCounter;
    private Complex[] inFft, outFft, collect;
    private  float frequencyOld = 0;

    private FrequencyListener frequencyListener;
    public void addFrequencyListener(FrequencyListener listener){
        this.frequencyListener = listener;
    }

    public float getFrequency(){
        return this.frequency;
    }
    public AutomaticFrequencyTuning(){
        int lengthFft = 16384;
        timeTuning = 3000 / 10;
        semplCounter = 0;
        accumVco = 0.f;
        phaseVco = 0.f;
        bpf = new Bpf(bpfCoefficients);
        delayForFft = new LineDelay(lengthFft / 2);
        delayForBpf = new LineDelay(bpfCoefficients.length / 2);
        fft = new FastFourierTransformer(DftNormalization.STANDARD);
        inFft = new Complex[lengthFft];
        outFft = new Complex[lengthFft];
        collect = new Complex[timeTuning];
        for (int i = 0; i < lengthFft; i++) {
            inFft[i] = new Complex(0.f, 0.f);
            outFft[i] = new Complex(0.f, 0.f);
        }
    }


    public Complex tuning(Complex sempl) {

        Complex outBpf = bpf.filter(sempl);

        Complex outMix = outBpf.multiply(outBpf);

        collect[semplCounter++] = outMix;

        Complex vco = new Complex((float) Math.cos(accumVco), (float) Math.sin(accumVco));

        Complex delayBpf = delayForBpf.delay(sempl);
        Complex delayFft = delayForFft.delay(delayBpf);

        Complex result = delayFft.multiply(vco);

        if (semplCounter == timeTuning) {

            semplCounter = 0;

            System.arraycopy(inFft, collect.length, inFft, 0, inFft.length - collect.length);
            System.arraycopy(collect, 0, inFft, inFft.length - collect.length, collect.length);

            outFft = fft.transform(inFft, TransformType.FORWARD);

            int index = 0;
            float energy = 0;

            for (int i = 0; i < outFft.length; i++) {
                if (outFft[i].abs() > energy) {
                    energy = (float) outFft[i].abs();
                    index = i;
                }
            }

            if (index > outFft.length / 2)
                index -= outFft.length;

            float relativeFrequency = (float) index / (float) outFft.length / 2.f;


            this.frequency = 3000.f * relativeFrequency;

            if(frequency!=frequencyOld) {
                frequencyOld = frequency;
                if(frequencyListener!=null)
                    frequencyListener.frequency(frequencyOld);
            }
            phaseVco = 2.f * (float) Math.PI * -relativeFrequency;

        }

        accumVco += phaseVco;
        accumVco %= 2.f * (float) Math.PI;

        return result;
    }

    public float getFrequencyShift(){return this.frequency;}

    private float[] bpfCoefficients = {
            -17.96633661712444050E-6f,
            32.46782273589473530E-6f,
            100.1355657630664950E-6f,
            53.29510640897244400E-6f,
            -113.2255938476920110E-6f,
            -206.0143222136724150E-6f,
            -52.70133065006471900E-6f,
            230.9042106917715390E-6f,
            305.3274777915445950E-6f,
            7.048739387696470790E-6f,
            -380.4819071996450930E-6f,
            -384.0886685261700680E-6f,
            90.54907242888177170E-6f,
            553.2233871074464560E-6f,
            427.4148718975955030E-6f,
            -243.8877836602549680E-6f,
            -736.7528045346923590E-6f,
            -420.4594223022256760E-6f,
            452.9318089416035490E-6f,
            915.3698333623467530E-6f,
            349.4538554270355350E-6f,
            -713.2278096376010130E-6f,
            -0.001070611169870332f,
            -202.8059700901564500E-6f,
            0.001015520010766139f,
            0.001182045181675499f,
            -27.80498204471946270E-6f,
            -0.001345605731819324f,
            -0.001228272789447314f,
            346.3980820326301570E-6f,
            0.001684457192830370f,
            0.001188093991742695f,
            -751.7867180947596350E-6f,
            -0.002008620884443837f,
            -0.001041787660635979f,
            0.001236856916427388f,
            0.002290889314644658f,
            772.4432371398388570E-6f,
            -0.001788074924333807f,
            -0.002501222584870641f,
            -367.2775366899847430E-6f,
            0.002385257533624068f,
            0.002607879850854013f,
            -181.1312890146513720E-6f,
            -0.003001621270965906f,
            -0.002578704072127850f,
            873.7569442404228540E-6f,
            0.003604105428536847f,
            0.002382488153323404f,
            -0.001704240724780265f,
            -0.004153938901099980f,
            -0.001990336897522012f,
            0.002658250489133729f,
            0.004607391302330209f,
            0.001376926819232365f,
            -0.003713102328931580f,
            -0.004916613029807749f,
            -521.5535221005276300E-6f,
            0.004837635169053608f,
            0.005030422650719344f,
            -591.1589494653901510E-6f,
            -0.005992288181639275f,
            -0.004894834328032874f,
            0.001971036774768433f,
            0.007129272791566537f,
            0.004453014600802527f,
            -0.003622818971330974f,
            -0.008192640858041890f,
            -0.003644177938684561f,
            0.005547593215465602f,
            0.009117896789478610f,
            0.002400589554264672f,
            -0.007745691221564811f,
            -0.009830511618982636f,
            -641.1472118351719020E-6f,
            0.010221962397785053f,
            0.010242096067591241f,
            -0.001741519686475492f,
            -0.012995344103421409f,
            -0.010241617958741674f,
            0.004907160411858899f,
            0.016117135947611740f,
            0.009675579615219991f,
            -0.009123629534131853f,
            -0.019709247518545352f,
            -0.008301153091872824f,
            0.014897708398431304f,
            0.024055415912480185f,
            0.005663071539164637f,
            -0.023330375624796916f,
            -0.029861916309501923f,
            -706.4049557271273440E-6f,
            0.037323784175190132f,
            0.039234830188732597f,
            -0.009882111655156874f,
            -0.067612656241084909f,
            -0.061672864768133044f,
            0.045281313750387471f,
            0.211156804598513215f,
            0.335731002757630015f,
            0.335731002757630015f,
            0.211156804598513215f,
            0.045281313750387471f,
            -0.061672864768133044f,
            -0.067612656241084909f,
            -0.009882111655156874f,
            0.039234830188732597f,
            0.037323784175190132f,
            -706.4049557271273440E-6f,
            -0.029861916309501923f,
            -0.023330375624796916f,
            0.005663071539164637f,
            0.024055415912480185f,
            0.014897708398431304f,
            -0.008301153091872824f,
            -0.019709247518545352f,
            -0.009123629534131853f,
            0.009675579615219991f,
            0.016117135947611740f,
            0.004907160411858899f,
            -0.010241617958741674f,
            -0.012995344103421409f,
            -0.001741519686475492f,
            0.010242096067591241f,
            0.010221962397785053f,
            -641.1472118351719020E-6f,
            -0.009830511618982636f,
            -0.007745691221564811f,
            0.002400589554264672f,
            0.009117896789478610f,
            0.005547593215465602f,
            -0.003644177938684561f,
            -0.008192640858041890f,
            -0.003622818971330974f,
            0.004453014600802527f,
            0.007129272791566537f,
            0.001971036774768433f,
            -0.004894834328032874f,
            -0.005992288181639275f,
            -591.1589494653901510E-6f,
            0.005030422650719344f,
            0.004837635169053608f,
            -521.5535221005276300E-6f,
            -0.004916613029807749f,
            -0.003713102328931580f,
            0.001376926819232365f,
            0.004607391302330209f,
            0.002658250489133729f,
            -0.001990336897522012f,
            -0.004153938901099980f,
            -0.001704240724780265f,
            0.002382488153323404f,
            0.003604105428536847f,
            873.7569442404228540E-6f,
            -0.002578704072127850f,
            -0.003001621270965906f,
            -181.1312890146513720E-6f,
            0.002607879850854013f,
            0.002385257533624068f,
            -367.2775366899847430E-6f,
            -0.002501222584870641f,
            -0.001788074924333807f,
            772.4432371398388570E-6f,
            0.002290889314644658f,
            0.001236856916427388f,
            -0.001041787660635979f,
            -0.002008620884443837f,
            -751.7867180947596350E-6f,
            0.001188093991742695f,
            0.001684457192830370f,
            346.3980820326301570E-6f,
            -0.001228272789447314f,
            -0.001345605731819324f,
            -27.80498204471946270E-6f,
            0.001182045181675499f,
            0.001015520010766139f,
            -202.8059700901564500E-6f,
            -0.001070611169870332f,
            -713.2278096376010130E-6f,
            349.4538554270355350E-6f,
            915.3698333623467530E-6f,
            452.9318089416035490E-6f,
            -420.4594223022256760E-6f,
            -736.7528045346923590E-6f,
            -243.8877836602549680E-6f,
            427.4148718975955030E-6f,
            553.2233871074464560E-6f,
            90.54907242888177170E-6f,
            -384.0886685261700680E-6f,
            -380.4819071996450930E-6f,
            7.048739387696470790E-6f,
            305.3274777915445950E-6f,
            230.9042106917715390E-6f,
            -52.70133065006471900E-6f,
            -206.0143222136724150E-6f,
            -113.2255938476920110E-6f,
            53.29510640897244400E-6f,
            100.1355657630664950E-6f,
            32.46782273589473530E-6f,
            -17.96633661712444050E-6f
    };




}